buildscript {
    ext.kotlin_version = '1.1.0'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin-platform-common'

allprojects {
    apply plugin: 'maven-publish'

    group 'org.test'
    version '1.0-SNAPSHOT'

    repositories {
        mavenCentral()
    }

}

dependencies {
    // multitarget library dependency
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
}

project('jre6') {
    apply plugin: 'kotlin-platform-jvm'

    dependencies {
        implement project(":commonlib")
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile "joda-time:joda-time:2.9.2"
    }
    compileKotlin {
        kotlinOptions.jdkHome = System.getenv("JDK_16")
    }
}

/*project('jre8') {
    apply plugin: 'kotlin'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    }
    compileKotlin {
        kotlinOptions.jdkHome = System.getenv("JDK_18")
    }

}*/

project('js') {
    apply plugin: 'kotlin-platform-js'

//    configurations {
//        compile.extendsFrom parent.configurations.compile
//        compile {
//
////            resolutionStrategy {
////                dependencySubstitution {
////                    substitute module('org.jetbrains.kotlin:kotlin-stdlib') with module("org.jetbrains.kotlin:kotlin-js-library:$kotlin_version")
//////                    substitute project(':util') with module('org.gradle:util:3.0')
////                }
////            }
//        }
//    }

    dependencies {
        implement project(":commonlib")
        compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    }

    def outDir = "${buildDir}/kotlin2js/main/"
    compileKotlin2Js {
        kotlinOptions.outputFile = outDir + "commonlib.js"
    }
    def testOutDir = "${buildDir}/kotlin2js/test/"
    compileTestKotlin2Js {
        kotlinOptions.outputFile = testOutDir + "test.js"
    }
    // TODO: packaging, publishing
}

// need to be here, otherwise sourceSets are erased
subprojects {
    jar {
        baseName "${parent.name}-${project.name}"
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier "sources"
    }
    publishing {
        publications {
            mainPublication(MavenPublication) {
                artifactId "${parent.name}-${project.name}"
                from components.java
                artifact sourcesJar

                pom.withXml {
                    asNode().dependencies.'*'.each { it.scope*.value = 'compile'}
                }
            }
        }
    }
}




task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}
publishing {
    publications {
        mainPublication(MavenPublication) {
            artifactId "${parent.name}-${project.name}"
            from components.java
            artifact sourcesJar

            pom.withXml {
                asNode().dependencies.'*'.each { it.scope*.value = 'compile'}
            }
        }
    }
}